/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as HomeImport } from './routes/home'
import { Route as CallElectionImport } from './routes/call-election'
import { Route as ElectionElectionIdVoteImport } from './routes/election/$electionId/vote'
import { Route as ElectionElectionIdDashboardImport } from './routes/election/$electionId/dashboard'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const CallElectionRoute = CallElectionImport.update({
  path: '/call-election',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ElectionElectionIdVoteRoute = ElectionElectionIdVoteImport.update({
  path: '/election/$electionId/vote',
  getParentRoute: () => rootRoute,
} as any)

const ElectionElectionIdDashboardRoute =
  ElectionElectionIdDashboardImport.update({
    path: '/election/$electionId/dashboard',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/call-election': {
      id: '/call-election'
      path: '/call-election'
      fullPath: '/call-election'
      preLoaderRoute: typeof CallElectionImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/election/$electionId/dashboard': {
      id: '/election/$electionId/dashboard'
      path: '/election/$electionId/dashboard'
      fullPath: '/election/$electionId/dashboard'
      preLoaderRoute: typeof ElectionElectionIdDashboardImport
      parentRoute: typeof rootRoute
    }
    '/election/$electionId/vote': {
      id: '/election/$electionId/vote'
      path: '/election/$electionId/vote'
      fullPath: '/election/$electionId/vote'
      preLoaderRoute: typeof ElectionElectionIdVoteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  CallElectionRoute,
  HomeRoute,
  LoginRoute,
  ElectionElectionIdDashboardRoute,
  ElectionElectionIdVoteRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/call-election",
        "/home",
        "/login",
        "/election/$electionId/dashboard",
        "/election/$electionId/vote"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/call-election": {
      "filePath": "call-election.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/election/$electionId/dashboard": {
      "filePath": "election/$electionId/dashboard.tsx"
    },
    "/election/$electionId/vote": {
      "filePath": "election/$electionId/vote.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
